# Controlling 'neopixel' WS2812 RGB LEDs.

Now that we have a (reasonably) precise delay function, we can implement a simple timing-based interface. A good example for learning how to do this is the popular WS2812 'neopixel' RGB LED. It is simple to program, can run on 3.3V or 5V, and can be used for all sorts of fun creative stuff.

The basic idea behind the interface is that you send Red-Green-Blue color values to the driver chip (which comes inside of the LED) over a single 'data input' pin. And if you connect more LEDs with their 'data in' pins connected to a previous LED's 'data out' pin, they will pass color values 'down the line' and you can control multiple LEDs with a single pin.

It really is as simple as writing 8 green bits, 8 red bits, and 8 blue bits, then latching the signal by holding it low. To send a '0', you pull the pin high for 0.4us and then pull it low for 0.85us. To send a '1', you pull the pin high for 0.8us and then pull it low for 0.45us. In other words, it's a signal that pulses every 1.25us and uses a 1:3 high:low timing ratio for '0' and a 2:3 high:low ratio for '1'.

I haven't had any hardware issues with them, but there are some basic non-software troubleshooting steps. Remember that you should attach a resistor between the LED's "power in" pin and your power source, to limit its current draw. It's also a good idea to put a resistor on the data line; for simplicity's sake, this code does not activate an internal 'pull-up' or 'pull-down' resistor, and especially when the wires might be long (which, with LEDs, they often are) a resistor will help reducde parasitic capacitance and voltage spikes on the line. Finally, a small (~100nF-10uF) capacitor between the 'voltage' and 'ground' lines where they connect to the LED will help the chip keep a stable reference voltage.
